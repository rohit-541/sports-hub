generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//To maintain Users
model User {
  id          Int           @id @default(autoincrement())
  kerbros     String        @unique
  name        String

  //Relations
  teams       Team[]        @relation("PlayerTeam")
}

//To Maintain GC POINTS

model GamePoint{
  id            Int           @id   @default(autoincrement())
  name          Sports
  points        Int           @default(0)
  hostelId      Int
  Hostel        Hostel        @relation(fields: [hostelId],references: [id],onDelete: Cascade,onUpdate: Cascade)        
}

model Hostel {
  id          Int           @id @default(autoincrement())
  hostelName  Hostels       @unique
  points      Int           @default(0)
  GamePoints  GamePoint[]   
  
  
  //Realtions
  teams       Team[]        @relation("HostelTeam")
}


model Team {
  id          Int           @id @default(autoincrement())
  hostelId    Int
  sport       Sports
  sportsType  sportType?     
  rank        Int?
  players     User[]         @relation("PlayerTeam")  
  score       Int?     //To count match won by them in categeory

  //Relations
  hostel      Hostel         @relation("HostelTeam",fields: [hostelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  matches1    Match[]        @relation("Team1")
  matches2    Match[]        @relation("Team2")
  winner      Match[]        @relation("WinnerTeam")
  winnerPool  Categeory[]    @relation("poolWinner")
  pools       Categeory[]       @relation("PoolTeam")
  rounds      Round[]
  ocMatchId   Int?
  
  // Relations
  ocMatch         OCMatch?           @relation(fields: [ocMatchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  OcMatchWinner   OCMatch[]           @relation("OCMatchWinners")

  @@unique([sport,hostelId])
}


//PoolA PoolB PoolC PoolD Quaterfinals  SemiFinals  Finals Mapped to a Sport
model Categeory {
  id          Int            @id @default(autoincrement())
  name        MatchType
  sport       Sports

  //Relations
  teams       Team[]         @relation("PoolTeam")
  winners     Team[]         @relation("poolWinner")           
  matches     Match[]       
  @@unique([sport,name])
}


model Match {
  id          Int           @id @default(autoincrement())

  //teams
  team1Id     Int
  team2Id     Int

  //Categeory
  CategeoryID Int
  type        MatchType

  //Sports
  sport       Sports
  sportType   sportType?
  //Winner
  winnerId    Int?

  //Scores Stored as Object
  scoreA      Int?          @default(0)
  scoreB      Int?          @default(0)

  //Status
  status      MatchStatus    @default(Scheduled)

  //Dates
  dateStart   DateTime       @db.Timestamp
  dateEnd     DateTime       @db.Timestamp

  //Venue
  latitude    Float?         @default(28.5444201360911)
  longitude   Float?         @default(77.18893289553354)
  location    String         @default("Cricket Ground")

  //Rounds
  rounds      Round[]        

  //Relations
  team1       Team           @relation("Team1", fields: [team1Id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  team2       Team           @relation("Team2", fields: [team2Id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  winner      Team?          @relation("WinnerTeam", fields: [winnerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pool        Categeory      @relation(fields: [CategeoryID], references: [id],onDelete: Cascade,onUpdate: Cascade)
}

model Round{
  id          Int            @id @default(autoincrement())
  name        String
  matchId     Int
  Match       Match           @relation(fields: [matchId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  scoreA      Int?
  scoreB      Int?
  winnerId    Int?
  winner      Team?            @relation(fields: [winnerId],references: [id],onDelete: Cascade,onUpdate: Cascade)

  @@unique([name,matchId])
}

model OCMatch {
  id          Int          @id @default(autoincrement())
  sport       Sports
  sportType   sportType?
 
  // Participating Teams
  teams       Team[]        

  // Winner(s)
  winners     Team[]        @relation("OCMatchWinners")

  // Status and Dates
  status      MatchStatus   @default(Scheduled)
  dateStart   DateTime      @db.Timestamp
  dateEnd     DateTime      @db.Timestamp

  // Venue Details
  latitude    Float?        @default(28.5444201360911)
  longitude   Float?        @default(77.18893289553354)
  location    String        @default("Cricket Ground")
}


enum Sports {
  Badminton
  Cricket
  Football
  Chess
  TT
  Volleyball
  Hockey
  Athletics
  Squash
  Weightlifting
}

enum Hostels {
  Aravali
  Karakoram
  Nilgiri
  Jwalamukhi
  Kumaon
  Satpura
  Udaigiri
  Dronagiri
  Vindyanchal
  Shivalik
  Saptagiri
  Zanskar
  Girnar
}

//OpenCategeory->Wieght Lifting etc
enum MatchType {
  PoolA
  PoolB
  PoolC
  PoolD
  Quarterfinal
  Semifinal
  Final
  OpenCategeory
}

enum MatchStatus {
  Scheduled
  Ongoing
  Completed
}

enum sportType{
  Singles
  Doubles
  l100
  l200
  l1500
  l400
  under56
}
