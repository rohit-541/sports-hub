generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ------------------------
//       USER
// ------------------------
model User {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  kerbros String @unique
  name    String

  // M2M with Team => replaced by join model: UserOnTeam
  userTeams UserOnTeam[]

  // If there are other 1:n or n:1 relations, keep them here
}

// ------------------------
//       HOSTEL
// ------------------------
model Hostel {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  hostelName Hostels     @unique
  points     Int         @default(0)
  GamePoints GamePoint[]

  // 1 -> n with Team
  // "teams: Team[] @relation("HostelTeam")" was many-to-one, which is allowed.
  teams Team[] @relation("HostelTeam")
}

// ------------------------
//       TEAM
// ------------------------
model Team {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  hostelId   String
  sport      Sports
  sportsType sportType?
  rank       Int?
  score      Int? // To count matches won by them in category

  // 1 -> n or n -> 1 with Hostel
  hostel Hostel @relation("HostelTeam", fields: [hostelId], references: [id])

  // Replaces "players: User[]" with the explicit join model
  userTeams UserOnTeam[]

  // Many-to-many with Categeory (two different relations: "PoolTeam" & "poolWinner")
  // replaced by join models:
  poolCategeories   TeamOnPool[] // For "PoolTeam"
  winnerCategeories TeamOnWinner[] // For "poolWinner"

  // 1 -> n with Match for "team1" and "team2"
  matches1 Match[] @relation("Team1")
  matches2 Match[] @relation("Team2")

  // 1 -> n with Match for "winner"
  winner Match[] @relation("WinnerTeam")

  // 1 -> n with Round for "winner"
  rounds Round[]

  // 1 -> 1 or n -> 1 with OCMatch (ocMatchId is the foreign key)
  ocMatchId String?
  ocMatch   OCMatch? @relation(fields: [ocMatchId], references: [id])

  // Many-to-many with OCMatch (for "teams" => OCMatchOnTeam, for "winners" => OCMatchWinners)
  ocMatchTeams   OCMatchOnTeam[]
  ocMatchWinners OCMatchWinners[]

  @@unique([sport, hostelId])
}

// ------------------------
//       USER <--> TEAM
//       (Join Model)
// ------------------------
model UserOnTeam {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String
  teamId String

  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])
}

// ------------------------
//      GAME POINT
// ------------------------
model GamePoint {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   Sports
  points Int    @default(0)

  hostelId String
  Hostel   Hostel @relation(fields: [hostelId], references: [id])
}

// ------------------------
//      CATEGEORY
// ------------------------
model Categeory {
  id    String    @id @default(auto()) @map("_id") @db.ObjectId
  name  MatchType
  sport Sports

  // Instead of "teams: Team[] @relation("PoolTeam")"
  // we now have a join model `TeamOnPool`.
  // Instead of "winners: Team[] @relation("poolWinner")"
  // we now have a join model `TeamOnWinner`.
  poolTeams   TeamOnPool[]
  winnerTeams TeamOnWinner[]

  matches Match[]

  @@unique([sport, name])
}

// ------------------------
//  TEAM <--> CATEGEORY
//   (Join Model #1: Pool)
// ------------------------
model TeamOnPool {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  teamId      String
  categeoryId String

  team      Team      @relation(fields: [teamId], references: [id])
  categeory Categeory @relation(fields: [categeoryId], references: [id])
}

// ------------------------
//  TEAM <--> CATEGEORY
//   (Join Model #2: Winner)
// ------------------------
model TeamOnWinner {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  teamId      String
  categeoryId String

  team      Team      @relation(fields: [teamId], references: [id])
  categeory Categeory @relation(fields: [categeoryId], references: [id])
}

// ------------------------
//      MATCH
// ------------------------
model Match {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Teams
  team1Id String
  team2Id String

  // Category
  CategeoryID String
  type        MatchType

  // Sports
  sport     Sports
  sportType sportType?

  // Winner
  winnerId String?

  // Scores
  scoreA Int? @default(0)
  scoreB Int? @default(0)

  // Status
  status MatchStatus @default(Scheduled)

  // Dates
  dateStart DateTime
  dateEnd   DateTime

  // Venue
  latitude  Float? @default(28.5444201360911)
  longitude Float? @default(77.18893289553354)
  location  String @default("Cricket Ground")

  // Rounds
  rounds Round[]

  // Relations
  team1  Team      @relation("Team1", fields: [team1Id], references: [id])
  team2  Team      @relation("Team2", fields: [team2Id], references: [id])
  winner Team?     @relation("WinnerTeam", fields: [winnerId], references: [id])
  pool   Categeory @relation(fields: [CategeoryID], references: [id])
}

// ------------------------
//       ROUND
// ------------------------
model Round {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  matchId String

  scoreA   Int?
  scoreB   Int?
  winnerId String?

  // Relations
  Match  Match? @relation(fields: [matchId], references: [id])
  winner Team?  @relation(fields: [winnerId], references: [id])

  @@unique([name, matchId])
}

// ------------------------
//      OCMatch
// ------------------------
model OCMatch {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  sport     Sports
  sportType sportType?

  // Instead of "teams: Team[]" => Join model
  ocMatchTeams OCMatchOnTeam[]

  // Instead of "winners: Team[]" => Join model
  ocMatchWinners OCMatchWinners[]

  // Status and Dates
  status    MatchStatus @default(Scheduled)
  dateStart DateTime
  dateEnd   DateTime

  // Venue Details
  latitude  Float? @default(28.5444201360911)
  longitude Float? @default(77.18893289553354)
  location  String @default("Cricket Ground")
  Team      Team[]
}

// ------------------------
//  OCMatch <--> Team
//   (Join Model #1: teams)
// ------------------------
model OCMatchOnTeam {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  ocMatchId String
  teamId    String

  ocMatch OCMatch @relation(fields: [ocMatchId], references: [id])
  team    Team    @relation(fields: [teamId], references: [id])
}

// ------------------------
//  OCMatch <--> Team
//   (Join Model #2: winners)
// ------------------------
model OCMatchWinners {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  ocMatchId String
  teamId    String

  ocMatch OCMatch @relation(fields: [ocMatchId], references: [id])
  team    Team    @relation(fields: [teamId], references: [id])
}

// ------------------------
//         ENUMS
// ------------------------
enum Sports {
  Badminton
  Cricket
  Football
  Chess
  TT
  Volleyball
  Hockey
  Athletics
  Squash
  Weightlifting
}

enum Hostels {
  Aravali
  Karakoram
  Nilgiri
  Jwalamukhi
  Kumaon
  Satpura
  Udaigiri
  Dronagiri
  Vindyanchal
  Shivalik
  Saptagiri
  Zanskar
  Girnar
}

enum MatchType {
  PoolA
  PoolB
  PoolC
  PoolD
  Quarterfinal
  Semifinal
  Final
  OpenCategeory
}

enum MatchStatus {
  Scheduled
  Ongoing
  Completed
}

enum sportType {
  Singles
  Doubles
  l100
  l200
  l1500
  l400
  under56
}