generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//User Model
//Each User is associated with a team 
model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  kerbros     String    @unique
  name        String
  hostelId    String    @db.ObjectId
  teamId      String?   @db.ObjectId

  //Relations
  Hostel      Hostel    @relation(fields: [hostelId],references: [id])
  userTeams   Team?     @relation(fields: [teamId],references: [id])
}

//Hostel Model
model Hostel {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  hostelName    Hostels       @unique
  points        Int           @default(0)
  GamePoints    GamePoint[]
  Users         User[]     
  teams         Team[]        @relation("HostelTeam")
}

//Teams Model
//Each team is Associated by a Hostel 
//Has arrays of Users 
model Team {
  id                  String      @id @default(auto()) @map("_id") @db.ObjectId
  hostelId            String      @db.ObjectId
  sport               Sports
  sportsType          sportType?
  rank                Int?     //Can Change later
  scores              Int?     //Can Change later
  Players             User[]
  CategeoryIds        String[]      @db.ObjectId
  Categeorys          Categeory[]   @relation(fields: [CategeoryIds],references: [id])
  OcMatchIds          String[]      @db.ObjectId
  ocMatchwins         String[]      @db.ObjectId
  CategeoryWinIds     String[]      @db.ObjectId

  //Relations
  hostel              Hostel      @relation("HostelTeam", fields: [hostelId], references: [id])
  CategeoryWins       Categeory[] @relation("Wins",fields: [CategeoryIds],references: [id])
  //Normal Games Realtions
  matches1            Match[]     @relation("Team1")
  matches2            Match[]     @relation("Team2")
  winner              Match[]     @relation("WinnerTeam")

  //Rounds
  rounds              Round[]
  //Stages of round
  winners             Stages[]

  //Match counter
  matchTally          matchTally[]
  OcMatch             OCMatch[]     @relation("TeamOcMatch",fields: [OcMatchIds],references: [id])     
  OcMatchWinner       OCMatch[]     @relation("winnerOcMatch",fields: [ocMatchwins],references: [id])
  @@unique([sport, hostelId])
}

//GamePoint Model
model GamePoint {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        Sports
  points      Int        @default(0)
  hostelId    String     @db.ObjectId 

  //Relations
  Hostel      Hostel    @relation(fields: [hostelId], references: [id])

  @@unique([hostelId,name]) 
}

model matchTally{
  id            String        @id   @default(auto()) @map("_id")  @db.ObjectId
  categeoryId   String        @db.ObjectId
  teamId        String        @db.ObjectId
  matchPlayer   Int
  matchWon      Int
  TotalMatch    Int  

  //Relations
  Team          Team          @relation(fields: [teamId],references: [id])
  Categeory     Categeory     @relation(fields: [categeoryId],references: [id])
}

//Categeory Model
model Categeory {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          MatchType
  sport         Sports
  matches       Match[]
  teamIds       String[]    @db.ObjectId
  winnerIds     String[]    @db.ObjectId

  winnerTeams   Team[]      @relation("Wins",fields: [winnerIds],references: [id])
  teams         Team[]      @relation(fields: [teamIds],references: [id])//Relationship between pool and teams(All)
  MatchesResult matchTally[]
  
  @@unique([sport, name])
}

//match Model
model Match {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId

  // Teams
  team1Id       String        @db.ObjectId
  team2Id       String        @db.ObjectId

  // Category
  CategeoryID   String        @db.ObjectId
  type          MatchType

  // Sports
  sport         Sports
  sportType     sportType?

  // Winner
  winnerId      String?       @db.ObjectId

  // Scores
  scoreA        Int?          @default(0)
  scoreB        Int?          @default(0)

  // Status
  status        MatchStatus   @default(Scheduled)

  // Dates
  dateStart DateTime
  dateEnd   DateTime

  // Venue
  latitude  Float? @default(28.5444201360911)
  longitude Float? @default(77.18893289553354)
  location  String @default("Cricket Ground")

  // Rounds
  rounds    Round[]

  // Relations
  team1     Team      @relation("Team1", fields: [team1Id], references: [id])
  team2     Team      @relation("Team2", fields: [team2Id], references: [id])
  winner    Team?     @relation("WinnerTeam", fields: [winnerId], references: [id])
  pool      Categeory @relation(fields: [CategeoryID], references: [id])
}

//Round Model
model Round {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    
  matchId   String    @db.ObjectId

  scoreA    Int?
  scoreB    Int?
  winnerId  String?    @db.ObjectId
  Stages    Stages[]
  // Relations
  Match     Match?     @relation(fields: [matchId], references: [id])
  winner    Team?      @relation(fields: [winnerId], references: [id])

  @@unique([name, matchId])
}

//Stages of Round
model Stages{
  id                String      @id     @default(auto())    @map("_id") @db.ObjectId
  name              String
  scoreA            Int 
  scoreB            Int
  roundId           String      @db.ObjectId
  winnerId          String      @db.ObjectId        

  winner            Team        @relation(fields: [winnerId],references: [id])
  Round             Round       @relation(fields: [roundId],references: [id])
}

model OCMatch {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  sport         Sports
  sportType     sportType?
  teamIds       String[]    @db.ObjectId
  winnerIds     String[]    @db.ObjectId

  teams         Team[]      @relation("TeamOcMatch",fields: [teamIds],references: [id])
  winners       Team[]      @relation("winnerOcMatch",fields: [winnerIds],references: [id])

  // Status and Dates
  status        MatchStatus @default(Scheduled)
  dateStart     DateTime
  dateEnd       DateTime

  // Venue Details
  latitude      Float?    @default(28.5444201360911)
  longitude     Float?    @default(77.18893289553354)
  location      String    @default("Cricket Ground")
}

// ------------------------
//         ENUMS
// ------------------------
enum Sports {
  Badminton
  Cricket
  Football
  Chess
  TT
  Volleyball
  Hockey
  Athletics
  Squash
  Weightlifting
}

enum Hostels {
  Aravali
  Karakoram
  Nilgiri
  Jwalamukhi
  Kumaon
  Satpura
  Udaigiri
  Dronagiri
  Vindyanchal
  Shivalik
  Saptagiri
  Zanskar
  Girnar
}

enum MatchType {
  PoolA
  PoolB
  PoolC
  PoolD
  Quarterfinal
  Semifinal
  Final
  OpenCategeory
}

enum MatchStatus {
  Scheduled
  Ongoing
  Completed
}

enum sportType {
  Singles
  Doubles
  l100
  l200
  l1500
  l400
  under56
}